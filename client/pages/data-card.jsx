import Head from "next/head";
import { useEffect, useState } from "react";
import axios from "axios";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";

import Dashboard from "@/components/Dashboard";
import SimpleAlertModal from "@/components/Modal";

const removeConnectionTitle = "Apakah anda yakin?";
const removeConnectionContent = "Anda akan menghapus data ini.";

const columnHelper = createColumnHelper();

export default function RegisterCard() {
  const [data, setData] = useState([]);
  const [open, setOpen] = useState(false);

  const handleRemoveCardConnection = () => {};

  const showConfirmationModal = () => {
    setOpen(true);
  };

  const renderRemoveConnectionButton = () => {
    return (
      <button
        type='button'
        onClick={showConfirmationModal}
        className='inline-flex items-center px-4 py-2 mt-5 text-sm font-medium border-2 rounded-md shadow-sm text-primary border-primary hover:bg-blue-800 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-700'
      >
        Hapus
      </button>
    );
  };

  const columns = [
    columnHelper.accessor("nim", {
      cell: (info) => info.getValue(),
      header: "NIM",
    }),
    columnHelper.accessor("name", {
      cell: (info) => info.getValue(),
      header: "Nama",
    }),
    columnHelper.accessor("code", {
      cell: (info) => info.getValue() ?? "-",
      header: "Kode Kartu",
    }),
    columnHelper.accessor("action", {
      cell: (info) => (info.getValue() ? renderRemoveConnectionButton() : null),
      header: "Aksi",
    }),
  ];

  useEffect(() => {
    axios
      .get("http://localhost:3001/api/student/all-pair")
      .then((res) => setData(res.data.data))
      .catch((err) => alert(err.message));
  }, []);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <>
      <Head>
        <title>Registrasi Kartu Baru</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Dashboard title='Registrasi Kartu Baru'>
        <main>
          <h2 className='mb-4'>Tabel Data Mahasiswa dan Kartu</h2>
          <div className='flex flex-col'>
            <div className='-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8'>
              <div className='inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8'>
                <div className='overflow-hidden border-b border-gray-200 shadow sm:rounded-lg'>
                  <table className='min-w-full divide-y divide-gray-200'>
                    <thead className='bg-gray-50'>
                      {table.getHeaderGroups().map((headerGroup, idx) => (
                        <tr key={headerGroup.id}>
                          <th
                            key='no'
                            scope='col'
                            className='px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase'
                          >
                            No
                          </th>
                          {headerGroup.headers.map((header) => (
                            <th
                              key={header.id}
                              scope='col'
                              className='px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase'
                            >
                              {header.isPlaceholder
                                ? null
                                : flexRender(
                                    header.column.columnDef.header,
                                    header.getContext()
                                  )}
                            </th>
                          ))}
                        </tr>
                      ))}
                    </thead>
                    <tbody>
                      {table.getRowModel().rows.map((row, idx) => (
                        <tr
                          key={row.id}
                          className={idx % 2 === 0 ? "bg-white" : "bg-gray-50"}
                        >
                          <td
                            key='no'
                            className='px-6 py-4 text-sm text-gray-500 whitespace-nowrap'
                          >
                            {idx + 1}
                          </td>
                          {row.getVisibleCells().map((cell) => (
                            <td
                              key={cell.id}
                              className='px-6 py-4 text-sm text-gray-500 whitespace-nowrap'
                            >
                              {flexRender(
                                cell.column.columnDef.cell,
                                cell.getContext()
                              )}
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  <SimpleAlertModal
                    open={open}
                    setOpen={setOpen}
                    title={removeConnectionTitle}
                    content={removeConnectionContent}
                    action={handleRemoveCardConnection}
                  />
                </div>
              </div>
            </div>
          </div>
        </main>
      </Dashboard>
    </>
  );
}
